package test.mypac;
/*
 * 		Weapon 클래스를 만드는 개발자는 유틸리티 개발자 혹은 프레임워크 개발자 혹은 여러분의 회사 팀장이라고 생각하면 된다.
 * 		
 * 		이 클래스를 팀원이 상속 받아서 사용하게 된다.
 * 
 * 		특정 메소드는 상속받은 후 재정의(override) 해서 사용하도록 미완성인 상태(추상메소드) 로 제공한다.
 * 
 * 		추상메소드는 데이터 타입의 역할은 가능하지만, 객체의 역할은 하지 못한다.
 * 		그래서 객체의 역할을 시키려면, 상속을 이용해서 하위 클래스(자식)로 연결 한다..
 * 		이 경우 override 가 강제된다. 하위 클래스에서 override 수정 해야됨
 * 
 * 		[	추상클래스 (Abstract Class)	]
 * 		- class 예약어 앞에 abstract 를 명시해서 클래스를 정의한다.
 * 		- 형태만 정의되고 실제 구현은 되지 않은 메소드가 존재할 수 있다.
 * 		- 형태만 정의된 메소드를 만들 때는 abstract 예약어를 붙여서 메소드를 정의한다.
 * 		- 생성자는 존재하지만 단독으로 객체 생성은 불가하다
 * 		- 추상클래스 Type 의 참조값이 필요하다면 추상클래스를 상속받은 자식 클래스를 정희해서 객체 생성한다.
 * 		- 추상클래스를 상속받은 자식클래스는 부모의 추상메소드를 모두 오버라이드(재정의) 해야한다.
 */
public abstract class Weapon {
	
	// 무기 작동을 준비하는 메소드
	public void prepare() {
		System.out.println("무기 작동을 준비합니다.");
	}
	
	//	공격을 하는 메소드의 모양만 정의하고 실제 구현은 하지 않기
	//	미완성된 추상메소드를 만들 때는 abstract 예약어가 필요하다. 이 경우에는 클래스에도 예약어를 작성해야된다.
	public abstract void attack(); // 추상 메소드 (데이터 타입의 역할을 할 수 있다)
}
